import{an as e,j as n,k as a,S as l,K as t,aH as p,ae as r,h}from"./chunks/framework.DkOBDE9j.js";const E=JSON.parse('{"title":"SCSS @import 语法更新指南","description":"","frontmatter":{},"headers":[],"relativePath":"我的/分享/内容/scss @import语法更新.md","filePath":"我的/分享/内容/scss @import语法更新.md","lastUpdated":1735021739000}'),o={name:"我的/分享/内容/scss @import语法更新.md"};function d(c,s,k,u,b,m){const i=r("ArticleMetadata");return h(),n("div",null,[s[0]||(s[0]=a("h1",{id:"scss-import-语法更新指南",tabindex:"-1"},[l("SCSS @import 语法更新指南 "),a("a",{class:"header-anchor",href:"#scss-import-语法更新指南","aria-label":'Permalink to "SCSS @import 语法更新指南"'},"​")],-1)),t(i),s[1]||(s[1]=p(`<h2 id="背景简述" tabindex="-1">背景简述 <a class="header-anchor" href="#背景简述" aria-label="Permalink to &quot;背景简述&quot;">​</a></h2><p>Sass 团队宣布将在未来版本中弃用 <code>@import</code> 规则,并推荐使用新的 <code>@use</code> 和 <code>@forward</code> 规则来替代。本文将介绍这一重要变更及迁移方案。</p><h2 id="为什么要更改" tabindex="-1">为什么要更改? <a class="header-anchor" href="#为什么要更改" aria-label="Permalink to &quot;为什么要更改?&quot;">​</a></h2><ol><li><code>@import</code> 存在的问题: <ul><li>所有导入都共享相同的命名空间,容易造成命名冲突</li><li>每次使用 <code>@import</code> 都会重复执行导入的文件</li><li>无法清晰地知道某个变量/混合器来自哪个文件</li></ul></li><li>新规则的优势: <ul><li><code>@use</code> 为每个文件创建独立的命名空间</li><li>一个文件只会被执行一次,不论被 <code>@use</code> 多少次</li><li>明确的依赖关系,更容易追踪变量来源</li></ul></li></ol><h2 id="新旧语法对比" tabindex="-1">新旧语法对比 <a class="header-anchor" href="#新旧语法对比" aria-label="Permalink to &quot;新旧语法对比&quot;">​</a></h2><h3 id="旧语法-import" tabindex="-1">旧语法 (@import) <a class="header-anchor" href="#旧语法-import" aria-label="Permalink to &quot;旧语法 (@import)&quot;">​</a></h3><div class="language-scss vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;variables&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mixins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="新语法-use" tabindex="-1">新语法 (@use) <a class="header-anchor" href="#新语法-use" aria-label="Permalink to &quot;新语法 (@use)&quot;">​</a></h3><div class="language-scss vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;variables&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mixins&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="新语法详解" tabindex="-1">新语法详解 <a class="header-anchor" href="#新语法详解" aria-label="Permalink to &quot;新语法详解&quot;">​</a></h2><h3 id="use" tabindex="-1">@use <a class="header-anchor" href="#use" aria-label="Permalink to &quot;@use&quot;">​</a></h3><p><code>@use</code> 语法用于引入一个 Sass 文件,并为该文件创建一个独立的命名空间。命名空间可以避免变量和混合器的命名冲突,并确保每个文件只被加载一次。</p><div class="language-scss vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;variables&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@use</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mixins&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="forward" tabindex="-1">@forward <a class="header-anchor" href="#forward" aria-label="Permalink to &quot;@forward&quot;">​</a></h3><p><code>@forward</code> 语法用于将一个文件中的变量和混合器转发到另一个文件中,以便在其他文件中使用。这对于创建可重用的模块非常有用。</p><div class="language-scss vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@forward</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;variables&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@forward</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;mixins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">## 迁移方案</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">### 自动迁移</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1. 安装 Sass 迁移工具</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`bash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install -g sass-migrator</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="2"><li>运行迁移命令</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sass-migrator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --migrate-deps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your-entrypoint.scss</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>如果您想从全局内置函数迁移，但尚未准备好完全迁移 @import 规则，则可以传递 --built-in-only 标志来迁移函数，同时保持@import 规则不变</p></blockquote><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://sass-lang.com/documentation/breaking-changes/import/" target="_blank" rel="noreferrer">Breaking Change: <code>@import</code> and global built-in functions</a></li></ul>`,21))])}const y=e(o,[["render",d]]);export{E as __pageData,y as default};
