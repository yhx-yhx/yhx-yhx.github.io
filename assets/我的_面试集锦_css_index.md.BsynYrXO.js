import{an as a,j as r,k as l,S as o,K as i,aH as e,ae as n,h as s}from"./chunks/framework.DkOBDE9j.js";const b=JSON.parse('{"title":"CSS 单位总结","description":"","frontmatter":{},"headers":[],"relativePath":"我的/面试集锦/css/index.md","filePath":"我的/面试集锦/css/index.md","lastUpdated":1747498199000}'),p={name:"我的/面试集锦/css/index.md"};function h(c,t,m,u,x,f){const d=n("ArticleMetadata");return s(),r("div",null,[t[0]||(t[0]=l("h1",{id:"css-单位总结",tabindex:"-1"},[o("CSS 单位总结 "),l("a",{class:"header-anchor",href:"#css-单位总结","aria-label":'Permalink to "CSS 单位总结"'},"​")],-1)),i(d),t[1]||(t[1]=e('<ol><li>常见单位</li></ol><table tabindex="0"><thead><tr><th>类型</th><th>单位</th><th>说明</th><th>应用场景</th></tr></thead><tbody><tr><td>相对单位</td><td>em</td><td>相对于当前元素的字体大小</td><td>文字大小、间距</td></tr><tr><td></td><td>rem</td><td>相对于根元素(html)的字体大小</td><td>响应式布局、文字大小</td></tr><tr><td></td><td>vw</td><td>视窗宽度的 1%</td><td>响应式布局、大屏展示</td></tr><tr><td></td><td>vh</td><td>视窗高度的 1%</td><td>响应式布局、大屏展示</td></tr><tr><td></td><td>vmin</td><td>vw 和 vh 中的较小值</td><td>响应式布局</td></tr><tr><td></td><td>vmax</td><td>vw 和 vh 中的较大值</td><td>响应式布局</td></tr><tr><td></td><td>%</td><td>相对于父元素</td><td>布局、间距</td></tr><tr><td>绝对单位</td><td>px</td><td>像素</td><td>固定布局、边框</td></tr><tr><td></td><td>pt</td><td>点，1pt = 1/72 英寸</td><td>打印排版</td></tr><tr><td></td><td>pc</td><td>派卡，1pc = 12pt</td><td>打印排版</td></tr><tr><td></td><td>in</td><td>英寸，1in = 96px</td><td>打印排版</td></tr><tr><td></td><td>cm</td><td>厘米，1cm = 37.8px</td><td>打印排版</td></tr><tr><td></td><td>mm</td><td>毫米，1mm = 3.78px</td><td>打印排版</td></tr></tbody></table><ol start="2"><li>px、em 和 rem 三者的区别</li></ol><ul><li>px 是绝对单位，在一定程度上属于相对单位，因为它是相对于显示器的分辨率而言的。</li><li>em 是相对单位，相对于父元素字体大小。</li><li>rem 也是相对单位，它是相对于 html 更元素的字体大小。</li></ul><ol start="3"><li>扩展知识 px 影响因素</li></ol><ul><li>设备像素比（DPR）：设备像素比（Device Pixel Ratio）是指物理像素和设备独立像素的比值。设备像素比可以通过 <code>window.devicePixelRatio</code> 获取。在移动端，设备像素比通常为 2 或 3，这意味着一个 CSS 像素等于 2 或 3 个物理像素。</li><li>px 与 dpr 的关系：在移动端，1px 的 CSS 像素等于 2 或 3 个物理像素。例如，如果设备像素比为 2，那么 1px 的 CSS 像素等于 2 个物理像素；如果设备像素比为 3，那么 1px 的 CSS 像素等于 3 个物理像素。</li></ul><h1 id="css-居中" tabindex="-1">css 居中 <a class="header-anchor" href="#css-居中" aria-label="Permalink to &quot;css 居中&quot;">​</a></h1>',7)),i(d),t[2]||(t[2]=e('<ol><li>水平居中</li></ol><ul><li>行内元素 使用：text-align: center;</li><li>块级元素使用 margin: 0 auto;</li><li>flex 布局 使用：justify-content: center;</li><li>grid 布局 使用：place-items: center;</li><li>绝对定位 使用：left: 50%; transform: translateX(-50%);</li></ul><ol start="2"><li>垂直居中</li></ol><ul><li>单行文本 使用：line-height: height;</li><li>flex 使用：display: flex; align-items: center;</li><li>grid 使用：display: grid; place-items: center;</li><li>绝对定位 使用：top: 50%; transform: translateY(-50%);</li></ul><h1 id="隐藏元素" tabindex="-1">隐藏元素 <a class="header-anchor" href="#隐藏元素" aria-label="Permalink to &quot;隐藏元素&quot;">​</a></h1>',5)),i(d),t[3]||(t[3]=e('<ol><li>站位隐藏</li></ol><ul><li>visibility: hidden;</li><li>opacity: 0;</li><li>position: absolute; left: -9999px;</li><li>margin-left: -9999px;</li><li>width: 0; height: 0; overflow: hidden;</li><li>clip-path: polygon(0 0, 0 0, 0 0, 0 0);</li></ul><ol start="2"><li>不站位隐藏</li></ol><ul><li>display: none;</li><li>input[type=&quot;hidden&quot;]</li><li>标签 hidden 属性</li></ul><ol start="3"><li>语义化隐藏</li></ol><ul><li>aria-hidden=&quot;true&quot;</li></ul><h1 id="浮动" tabindex="-1">浮动 <a class="header-anchor" href="#浮动" aria-label="Permalink to &quot;浮动&quot;">​</a></h1>',7)),i(d),t[4]||(t[4]=l("ol",null,[l("li",null,"浮动的出现是 是为了解决图文环绕的问题")],-1))])}const v=a(p,[["render",h]]);export{b as __pageData,v as default};
