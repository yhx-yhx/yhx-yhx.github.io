import{ak as s,h as a,aE as l,f as t}from"./chunks/framework.bB9sJqKE.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"基础知识/javascript/红宝书/23JSON.md","filePath":"基础知识/javascript/红宝书/23JSON.md","lastUpdated":1713792803000}'),e={name:"基础知识/javascript/红宝书/23JSON.md"};function n(p,i,r,h,k,d){return t(),a("div",null,i[0]||(i[0]=[l('<h3 id="_23-json" tabindex="-1">23 JSON <a class="header-anchor" href="#_23-json" aria-label="Permalink to &quot;23 JSON&quot;">​</a></h3><h4 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h4><ul><li>支持3种类型值： <ul><li>1.简单值：字符串、数值、布尔值 和 null （<strong>undefined不可以</strong>）</li><li>2.对象 可以是复杂类型 也可以是简单类型</li><li>3.数组 [简单类型|复杂类型]</li></ul></li><li>没有变量 函数 对象实例的概念</li><li>JSON中所有的记号都只是表示<strong>结构化数据</strong></li></ul><h4 id="解析与序列化" tabindex="-1">解析与序列化 <a class="header-anchor" href="#解析与序列化" aria-label="Permalink to &quot;解析与序列化&quot;">​</a></h4><ul><li><p>stringify（）和parse（）方法</p><ul><li><p>JSON.stringify()</p><ul><li>会将一个JavaScript 对象 序列化成一个字符串</li><li>undefined 类型会被直接跳过</li><li>第一个参数 <strong>js 对象</strong> 第二个参数 **需要被转化成字符串的字段</li><li>第三个参数 <strong>控制参数的缩进 与空格</strong> ；例如 4：每级缩进的4个空格；数值大于10 自动换行 ；可以是数字、Tab或任意字符串</li></ul></li><li><p>JSON.parse()</p><ul><li><p>将json序列化的字符串 转化成 JavaScript 对象</p></li><li><p>参数1序列化字符串 参数二 <strong>替换函数 数据格式包装替换</strong></p></li><li><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JSONText,(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Date&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul></li></ul></li><li><p>JSON.stringfy(objct,[titleName,titleName2]) 代替函数</p></li><li><p>JSON.parse(json)还原函数</p></li><li><p>其它参数的目的 为了修改或过滤数据</p></li></ul>',5)]))}const g=s(e,[["render",n]]);export{u as __pageData,g as default};
