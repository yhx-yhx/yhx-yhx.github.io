import{ak as t,h as l,j as a,R as d,J as r,aE as n,ab as i,f as c}from"./chunks/framework.bB9sJqKE.js";const u=JSON.parse('{"title":"03 如何实现懒加载实现","description":"","frontmatter":{},"headers":[],"relativePath":"我的/面试集锦/场景题目/03如何实现懒加载实现.md","filePath":"我的/面试集锦/场景题目/03如何实现懒加载实现.md","lastUpdated":1728719965000}'),p={name:"我的/面试集锦/场景题目/03如何实现懒加载实现.md"};function s(m,e,g,h,_,f){const o=i("ArticleMetadata");return c(),l("div",null,[e[0]||(e[0]=a("h1",{id:"_03-如何实现懒加载实现",tabindex:"-1"},[d("03 如何实现懒加载实现 "),a("a",{class:"header-anchor",href:"#_03-如何实现懒加载实现","aria-label":'Permalink to "03 如何实现懒加载实现"'},"​")],-1)),r(o),e[1]||(e[1]=n('<h2 id="通过-htmlimageelement-的-loading-属性实现" tabindex="-1">通过 HTMLIMageElement 的 loading 属性实现 <a class="header-anchor" href="#通过-htmlimageelement-的-loading-属性实现" aria-label="Permalink to &quot;通过 HTMLIMageElement 的 loading 属性实现&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLImageElement/loading" target="_blank" rel="noreferrer">mdn HTMLIMageElement loading</a></p><p>HTMLImageElement 的 loading 属性为一个字符串，它的值会提示 用户代理 告诉浏览器不在可视视口内的图片该如何加载。这样一来，通过推迟图片加载仅让其在需要的时候加载而非页面初始载入时立刻加载，优化了页面的载入。</p><h3 id="值" tabindex="-1">值 <a class="header-anchor" href="#值" aria-label="Permalink to &quot;值&quot;">​</a></h3><p><code>eager</code></p><p>默认行为， eager 告诉浏览器当处理 <img> 标签时立即加载图片。</p><p><code>lazy</code></p><p>告诉用户代理推迟图片加载<code>直到浏览器认为其需要立即加载时才去加载</code>。例如，如果用户正在往下滚动页面，值为 lazy 会导致图片仅在马上要出现在 可视视口中时开始加载。</p><h3 id="使用说明" tabindex="-1">使用说明 <a class="header-anchor" href="#使用说明" aria-label="Permalink to &quot;使用说明&quot;">​</a></h3><p>load 事件的时机</p><p>load 事件在文档被完整的处理完成时触发。当图片使用立即加载 (默认值) 时，文档中的所有图片都会在 load 事件触发前载入。</p><p><code>当 loading 值设为 lazy 时，图片不再会在请求，下载，处理的时间内推迟 load 事件触发。</code></p><p><code>loading 属性值设为 lazy 但是在页面初次加载时就在可视视口内的图片会立即加载但它们也不会推迟 load 事件</code>。</p><p>换句话说，这些图片不会在处理 <code>&lt;img&gt;</code> 元素时立即加载，但仍会作为页面初始加载的一部分而加载。他们只是不会影响 load 事件。</p><p>这表明当 load 触发时，可视区域内懒加载的图片可能不可见。</p><p>防止元素在图片懒加载时出现移位 当一个加载被 loading 属性设为 lazy 的图片最后加载时，浏览器会根据<code>&lt;img&gt;</code> 元素的尺寸和图片自身大小重排文档，更新被图片影响的元素的位置。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p><code>为了防止重排发生，你需要使用 width 和 height 属性明确设置图片大小。通过这样建立固有长宽比，你防止了元素的移位。取决于实际的加载时间和重排，移位造成的最小的影响可能只是使用户困惑和不适，最坏的影响则是导致用户点错目标</code>。</p></div>',17))])}const k=t(p,[["render",s]]);export{u as __pageData,k as default};
