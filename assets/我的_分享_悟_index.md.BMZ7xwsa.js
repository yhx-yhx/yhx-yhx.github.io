import{an as p,j as r,k as e,S as o,K as n,aH as d,ae as i,h as s}from"./chunks/framework.DkOBDE9j.js";const _=JSON.parse('{"title":"悟","description":"","frontmatter":{},"headers":[],"relativePath":"我的/分享/悟/index.md","filePath":"我的/分享/悟/index.md","lastUpdated":1733146747000}'),l={name:"我的/分享/悟/index.md"};function c(h,a,m,f,x,u){const t=i("ArticleMetadata");return s(),r("div",null,[a[0]||(a[0]=e("h1",{id:"悟",tabindex:"-1"},[o("悟 "),e("a",{class:"header-anchor",href:"#悟","aria-label":'Permalink to "悟"'},"​")],-1)),n(t),a[1]||(a[1]=d('<h2 id="究其根本悟其本源" tabindex="-1">究其根本悟其本源 <a class="header-anchor" href="#究其根本悟其本源" aria-label="Permalink to &quot;究其根本悟其本源&quot;">​</a></h2><p>悟其本源；十有八九，十项九翔。究其根本，在其初始；</p><p>急功近利，只见树木不见森林。究其缘由，原因有三：</p><p>没有大局观，没有对项目整体的把控能力</p><p>没有对整体架构的深入思考</p><p>没有对业务流程的深刻理解</p><h2 id="固本思源" tabindex="-1">固本思源 <a class="header-anchor" href="#固本思源" aria-label="Permalink to &quot;固本思源&quot;">​</a></h2><p>自己写完代码后，花时间思考（review 5 分钟），代码是否存在问题，是否存在冗余，是否之前写过类似功能</p><h2 id="生生不息" tabindex="-1">生生不息 <a class="header-anchor" href="#生生不息" aria-label="Permalink to &quot;生生不息&quot;">​</a></h2><p>屎山代码并不能杜绝，所以尽量减少</p><p>减少之法：</p><p>充分提取函数：组件、函数、方法、通用样式提取……</p><p>合理（通用 、不冗余）的命名：文件名、组件名、函数名、变量名、样式名……</p><p>通用变量的提取：业务字典、枚举、常量、配置、工具类</p><p>可扩展的架构:组件的自定义插槽、函数继承扩展、钩子函数（事件处理函数）等设计理念……</p><p>解除过度设计：</p><p>第一：需求不明确，需求频繁变更</p><p>第二：过度设计，没有充分理解需求，把控需求方向。</p><p>第三：过早优化，没有经过充分验证</p><p>减少偶发问题：</p><p>第一：出现问题，及时记录</p><p>第二：解决问题，及时总结</p>',22))])}const k=p(l,[["render",c]]);export{_ as __pageData,k as default};
