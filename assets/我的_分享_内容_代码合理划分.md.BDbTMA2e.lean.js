import{an as p,j as a,k as e,S as t,K as o,aH as r,ae as s,h as d}from"./chunks/framework.DkOBDE9j.js";const x=JSON.parse('{"title":"代码的合理划分","description":"","frontmatter":{},"headers":[],"relativePath":"我的/分享/内容/代码合理划分.md","filePath":"我的/分享/内容/代码合理划分.md","lastUpdated":1727423676000}'),n={name:"我的/分享/内容/代码合理划分.md"};function c(_,l,u,m,h,f){const i=s("ArticleMetadata");return d(),a("div",null,[l[0]||(l[0]=e("h1",{id:"代码的合理划分",tabindex:"-1"},[t("代码的合理划分 "),e("a",{class:"header-anchor",href:"#代码的合理划分","aria-label":'Permalink to "代码的合理划分"'},"​")],-1)),o(i),l[1]||(l[1]=r('<h2 id="_1-组件" tabindex="-1">1.组件 <a class="header-anchor" href="#_1-组件" aria-label="Permalink to &quot;1.组件&quot;">​</a></h2><p>1.1 组件的拆分：</p><ul><li><p>业务组件和通用组件拆分。</p></li><li><p>代码逻辑和样式的拆分。</p></li><li><p>通用逻辑抽离</p></li><li><p>整体评估很重要</p><p>1.1.2 怎么做组件拆分？</p><ul><li><p>统一设计理念：推荐：代码样式逻辑放置位置统一，忌：代码样式随意放置；</p></li><li><p>简化代码实现逻辑：简化代码逻辑，比如 精简代码传参，比如：参数校验、参数类型、参数默认值等。</p></li><li><p>统一化变量处理：错误处理，比如：错误码、错误信息、错误提示等。</p></li><li><p>减少代码重复（逻辑抽离）: 比如：utils hooks 等。</p></li><li><p>减小单个文件的代码体积：函数 文件行数 不要超过 500 行。</p><ul><li>单个函数方法：不超过 20-50 行；</li><li>单个文件（模块）：不超过 500 行；</li><li>单个组件：不超过 300 行；</li></ul></li><li><p>推荐 原子化 css;</p></li><li><p>推荐 代码加入 ts;</p><p>1.1.3 关于代码优化的思考：</p></li><li><p>代码优化应该尽可能的减少，而不是为了<code>炫技</code>。</p></li><li><p>代码优化应该有价值。</p><p>1.1.4 review code</p></li><li><p>是有价值的，有助于团队的协作。</p></li><li><p>团队成员的代码风格要保持一致。</p></li><li><p>有助于代码的迭代 不正代码在一定程度上提升可读性。</p></li><li><p>减少代码的维护成本。</p></li><li><p>当然减少团队成员的不可替代性。</p></li></ul><p>最后所有的努力，都是为了避免<code>屎山项目</code>的出现。</p></li></ul>',3))])}const N=p(n,[["render",c]]);export{x as __pageData,N as default};
